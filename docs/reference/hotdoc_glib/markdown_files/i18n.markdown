---
short-description: !!python/unicode 'gettext support macros'
symbols:
- g_dngettext
- g_strip_context
- NC_
- g_dcgettext
- Q_
- g_dgettext
- C_
- g_get_language_names
- N_
- g_dpgettext2
- g_dpgettext
- g_get_locale_variants
- _
title: !!python/unicode 'Internationalization'
...

GLib doesn't force any particular localization method upon its users.
But since GLib itself is localized using the [](gettext) mechanism, it seems
natural to offer the de-facto standard [](gettext) support macros in an
easy-to-use form.

In order to use these macros in an application, you must include
`&lt;glib/gi18n.h&gt;`. For use in a library, you must include
`&lt;glib/gi18n-lib.h&gt;`
after defining the [](GETTEXT_PACKAGE) macro suitably for your library:

```
&lt;!-- language="C" --&gt;
#define GETTEXT_PACKAGE "gtk20"
#include &lt;glib/gi18n-lib.h&gt;

```

For an application, note that you also have to call [](bindtextdomain),
[](bind_textdomain_codeset), [](textdomain) and [](setlocale) early on in your
[](main) to make [](gettext) work. For example:

```
&lt;!-- language="C" --&gt;
#include &lt;glib/gi18n.h&gt;
#include &lt;locale.h&gt;

int
main (int argc, char **argv)
{
setlocale (LC_ALL, "");
bindtextdomain (GETTEXT_PACKAGE, DATADIR "/locale");
bind_textdomain_codeset (GETTEXT_PACKAGE, "UTF-8");
textdomain (GETTEXT_PACKAGE);

// Rest of your application.
}

```

where `DATADIR` is as typically provided by automake.

For a library, you only have to call [](bindtextdomain) and
[](bind_textdomain_codeset) in your initialization function. If your library
doesn't have an initialization function, you can call the functions before
the first translated message.

The
[gettext manual](http://www.gnu.org/software/gettext/manual/gettext.html[](Maintainers))
covers details of how to integrate gettext into a projectâ€™s build system and
workflow.
